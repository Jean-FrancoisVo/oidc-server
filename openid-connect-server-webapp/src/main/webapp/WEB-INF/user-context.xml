<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2016 The MITRE Corporation
      and the MIT Internet Trust Consortium
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
      http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="otpGeneratingAuthenticationProvider" />
	</security:authentication-manager>
		
	<mvc:view-controller path="/login" view-name="login" />
	<mvc:view-controller path="/otpentry" view-name="otpentry" />

	<security:http auto-config="false" disable-url-rewriting="true" use-expressions="true" entry-point-ref="pathLoginAuthenticationEntryPoint">
		<security:form-login authentication-failure-handler-ref="pathUrlAuthenticationFailureHandler"
							 authentication-success-handler-ref="userpassSuccessHandler" />
		<security:intercept-url pattern="/authorize" access="hasRole('ROLE_USER')" />
		<!--<security:intercept-url pattern="/otpentry" access="hasRole('PRE_AUTH_USER')" />-->
		<security:intercept-url pattern="/**" access="permitAll" />
		<security:custom-filter ref="authRequestFilter" after="SECURITY_CONTEXT_FILTER" />
		<security:custom-filter ref="otpValidationFilter" before="LAST" />
		<security:logout success-handler-ref="pathUrlLogoutSuccessHandler" />
		<security:anonymous />
		<security:expression-handler ref="oauthWebExpressionHandler" />
		<security:headers>
			<security:frame-options policy="DENY" />
		</security:headers>
		<security:csrf />
	</security:http>

	<bean id="pathUrlAuthenticationFailureHandler" class="org.mitre.openid.connect.config.PathUrlAuthenticationFailureHandler" />

	<bean id="pathLoginAuthenticationEntryPoint" class="org.mitre.openid.connect.config.PathLoginAuthenticationEntryPoint">
		<constructor-arg value="/login" />
	</bean>

	<bean id="pathUrlLogoutSuccessHandler" class="org.mitre.openid.connect.config.PathUrlLogoutSuccessHandler" />

	<bean id="userpassSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
		<constructor-arg value="/otpentry" />
	</bean>

	<!-- Validation filter definition -->
	<bean id="otpValidationFilter" class="com.upcrob.springsecurity.otp.OtpValidationFilter">
		<constructor-arg name="tokenstore" ref="localTokenstore" />
		<constructor-arg name="endpoint" value="/validate" />
		<constructor-arg name="successUrl" value="home" />
		<constructor-arg name="failureUrl" value="login?error" />
	</bean>

	<bean id="jdbcUserDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- OTP wrapper authentication provider - wraps the primary authentication provider -->
	<bean id="otpGeneratingAuthenticationProvider" class="com.upcrob.springsecurity.otp.OtpGeneratingAuthenticationProvider">
		<constructor-arg name="userInfoService" ref="defaultUserInfoService"/>
		<constructor-arg name="userDetailsService" ref="jdbcUserDetailsService" />
		<constructor-arg name="tokenstore" ref="localTokenstore" />
		<constructor-arg name="sendStrategy" ref="smsSendStrategy" />
	</bean>

	<!-- In-memory tokenstore (not for production) that stores generates tokens
		and treats them as valid for 60 seconds following creation -->
	<bean id="localTokenstore" class="com.upcrob.springsecurity.otp.tokenstore.LocalTokenstore">
		<constructor-arg name="maxLifetime" value="300" />
	</bean>

	<!-- Method by which OTP tokens should be sent. We'll use email for this 
		example. The server, port and TLS properties are currently setup for gmail, 
		but need to be configured differently if a different provider is being used. -->
	<bean id="smsSendStrategy" class="com.upcrob.springsecurity.otp.send.SmsSendStrategy" />
</beans>
